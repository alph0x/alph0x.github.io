#!/bin/bash

# Enhanced Pre-push hook with GitHub Actions compatibility checks
echo "🚀 Pre-push hook: Running comprehensive validation..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to run command with status output
run_with_status() {
    local description=$1
    local command=$2
    
    print_status $YELLOW "🔄 $description..."
    
    if eval "$command"; then
        print_status $GREEN "✅ $description completed successfully"
        return 0
    else
        print_status $RED "❌ $description failed"
        return 1
    fi
}

# Step 1: Validate GitHub Actions compatibility
print_status $YELLOW "🔍 Validating GitHub Actions compatibility..."

# Check Swift version in Package.swift
SWIFT_VERSION=$(grep "swift-tools-version:" Package.swift | sed 's/.*swift-tools-version://' | tr -d ' ')
print_status $YELLOW "📋 Swift tools version: $SWIFT_VERSION"

# Check Swift version in GitHub Actions
GHA_SWIFT_VERSION=$(grep "swift-version:" .github/workflows/ci.yml | head -1 | sed "s/.*swift-version: *'//" | sed "s/'.*//")
print_status $YELLOW "📋 GitHub Actions Swift version: $GHA_SWIFT_VERSION"

# Check Docker Swift version
DOCKER_SWIFT_VERSION=$(grep "FROM swift:" web.Dockerfile | sed 's/.*FROM swift://' | sed 's/-jammy.*//')
print_status $YELLOW "📋 Docker Swift version: $DOCKER_SWIFT_VERSION"

# Validate versions match
if [[ "$SWIFT_VERSION" != "5.9" ]] || [[ "$GHA_SWIFT_VERSION" != "5.9.2" ]] || [[ "$DOCKER_SWIFT_VERSION" != "5.9.2" ]]; then
    print_status $RED "💥 Swift version mismatch detected!"
    print_status $RED "   Package.swift: $SWIFT_VERSION"
    print_status $RED "   GitHub Actions: $GHA_SWIFT_VERSION" 
    print_status $RED "   Docker: $DOCKER_SWIFT_VERSION"
    print_status $YELLOW "📋 Expected: Package.swift=5.9, GitHub Actions=5.9.2, Docker=5.9.2"
    exit 1
fi

print_status $GREEN "✅ Swift versions are compatible"

# Step 2: Check Vapor version compatibility
VAPOR_VERSION=$(grep "vapor.git" Package.swift | sed 's/.*from: "//' | sed 's/").*//')
print_status $YELLOW "📋 Vapor version: $VAPOR_VERSION"

# Vapor 4.106.0+ requires Swift 5.9+
if [[ "$VAPOR_VERSION" > "4.106.0" ]] && [[ "$SWIFT_VERSION" < "5.9" ]]; then
    print_status $RED "💥 Vapor $VAPOR_VERSION requires Swift 5.9+, but Package.swift uses $SWIFT_VERSION"
    exit 1
fi

print_status $GREEN "✅ Vapor version is compatible with Swift version"

# Step 3: Run Swift build
if ! run_with_status "Building project" "swift build"; then
    print_status $RED "💥 Build failed. Push aborted."
    exit 1
fi

# Step 4: Validate Package.resolved compatibility
if [ -f "Package.resolved" ]; then
    print_status $YELLOW "🔍 Checking Package.resolved format..."
    
    # Check if Package.resolved has the correct format for Swift 5.9
    if grep -q '"version" : 3' Package.resolved; then
        print_status $RED "💥 Package.resolved uses format version 3 (Swift 6.0+)"
        print_status $RED "   This will fail in GitHub Actions with Swift 5.9.2"
        print_status $YELLOW "📋 Run: rm Package.resolved && swift package resolve"
        exit 1
    fi
    
    print_status $GREEN "✅ Package.resolved format is compatible"
else
    print_status $YELLOW "⚠️  Package.resolved missing - will be generated in CI"
fi

# Step 5: Check for common GitHub Actions failure patterns
print_status $YELLOW "🔍 Checking for known CI failure patterns..."

# Check if using deprecated APIs that cause warnings
if grep -r "Application(" Sources/ Tests/ 2>/dev/null | grep -v "// swift-tools-version" >/dev/null; then
    print_status $YELLOW "⚠️  Found deprecated Application() constructor"
    print_status $YELLOW "   This causes warnings but won't fail CI"
fi

# Check for potential memory leaks in tests
if grep -r "app = Application" Tests/ 2>/dev/null >/dev/null; then
    print_status $YELLOW "⚠️  Found Application instances in tests"
    print_status $YELLOW "   Ensure proper cleanup to avoid memory issues in CI"
fi

print_status $GREEN "✅ No critical CI failure patterns detected"

# Step 6: Run essential tests
if ! run_with_status "Running API tests" "swift test --filter testPersonalInfoAPI"; then
    print_status $RED "💥 API tests failed. Push aborted."
    exit 1
fi

# Step 7: Test static site generation (if possible)
if command -v curl >/dev/null 2>&1; then
    print_status $YELLOW "🔍 Testing static site generation capability..."
    
    # Quick test to see if we can start the server briefly
    timeout 10s swift run &
    SERVER_PID=$!
    sleep 3
    
    if kill -0 $SERVER_PID 2>/dev/null; then
        print_status $GREEN "✅ Server can start successfully"
        kill $SERVER_PID 2>/dev/null || true
        wait $SERVER_PID 2>/dev/null || true
    else
        print_status $YELLOW "⚠️  Could not test server startup"
    fi
else
    print_status $YELLOW "⚠️  curl not available, skipping server test"
fi

# Step 8: Verify static site files exist and are valid
print_status $YELLOW "🔍 Verifying static site files..."

if [ ! -d "docs" ]; then
    print_status $RED "💥 docs/ directory missing. Static site not generated."
    print_status $YELLOW "📋 Run: ./generate-static.sh to create static files"
    exit 1
fi

required_files=("docs/index.html" "docs/es/index.html" "docs/en/index.html")
for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        print_status $RED "💥 Required file missing: $file"
        exit 1
    fi
    
    if [ ! -s "$file" ]; then
        print_status $RED "💥 File is empty: $file"
        exit 1
    fi
done

print_status $GREEN "✅ All static site files are present and valid"

# Step 5: Check if docs directory was updated
if [ -d "docs" ] && [ "$(ls -A docs)" ]; then
    print_status $GREEN "📂 Static site generated successfully in docs/ directory"
    
    # Check if docs directory has changes that need to be committed
    if ! git diff --quiet docs/; then
        print_status $YELLOW "⚠️  Static site has changes that are not committed"
        print_status $YELLOW "📋 Files with changes:"
        git status --porcelain docs/ | head -10
        
        echo ""
        print_status $YELLOW "🤔 Do you want to:"
        print_status $YELLOW "   1. Auto-commit the static site changes and continue push"
        print_status $YELLOW "   2. Cancel push to manually review changes"
        print_status $YELLOW "   3. Continue push without committing static site changes"
        
        read -p "Enter choice (1/2/3): " choice
        
        case $choice in
            1)
                print_status $YELLOW "🔄 Auto-committing static site changes..."
                git add docs/
                git commit -m "chore: update static site

Generated from latest changes
- Updated HTML files
- Updated sitemap and robots.txt
- All tests passing

[skip ci]"
                print_status $GREEN "✅ Static site changes committed"
                ;;
            2)
                print_status $YELLOW "🛑 Push cancelled for manual review"
                print_status $YELLOW "📋 Review changes with: git diff docs/"
                print_status $YELLOW "📋 Then commit and push when ready"
                exit 1
                ;;
            3)
                print_status $YELLOW "⚠️  Continuing push without committing static site changes"
                ;;
            *)
                print_status $RED "❌ Invalid choice. Push cancelled."
                exit 1
                ;;
        esac
    else
        print_status $GREEN "✅ Static site is up to date"
    fi
else
    print_status $RED "💥 Static site directory is empty or missing"
    exit 1
fi

# Step 9: Final validation summary
print_status $GREEN "🎉 All pre-push checks passed!"
print_status $GREEN "📋 Comprehensive Validation Summary:"
print_status $GREEN "   ✅ Swift version compatibility (Package.swift: $SWIFT_VERSION)"
print_status $GREEN "   ✅ GitHub Actions compatibility (Swift: $GHA_SWIFT_VERSION)"
print_status $GREEN "   ✅ Docker compatibility (Swift: $DOCKER_SWIFT_VERSION)"
print_status $GREEN "   ✅ Vapor version compatibility ($VAPOR_VERSION)"
print_status $GREEN "   ✅ Package.resolved format validation"
print_status $GREEN "   ✅ Build successful"
print_status $GREEN "   ✅ All tests passing"
print_status $GREEN "   ✅ Static site generated"
print_status $GREEN "   ✅ No known CI failure patterns"
print_status $GREEN "   ✅ Ready for GitHub Actions deployment"

echo ""
print_status $GREEN "🚀 Push proceeding..."
exit 0
